{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03d44c71-bf49-4793-a07e-e35dfc5e2da2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import library for Flask\n",
    "from flask import Flask, jsonify\n",
    "from flask import request\n",
    "from flasgger import Swagger, LazyString, LazyJSONEncoder\n",
    "from flasgger import swag_from\n",
    "\n",
    "# Import library or framework for Machine Learning process\n",
    "import pickle, re\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from keras.models import load_model\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "\n",
    "# Define Swagger UI description\n",
    "app = Flask(__name__)\n",
    "app.json_encoder = LazyJSONEncoder\n",
    "swagger_template = dict(\n",
    "info = {\n",
    "    'title': LazyString(lambda: 'API Documentation for Sentiment Analysis API'),\n",
    "    'version': LazyString(lambda: '1.0.0'),\n",
    "    'description': LazyString(lambda: 'Dokumentasi API untuk Sentiment Analysis API'),\n",
    "    },\n",
    "    host = LazyString(lambda: request.host)\n",
    ")\n",
    "swagger_config = {\n",
    "    \"headers\": [],\n",
    "    \"specs\": [\n",
    "        {\n",
    "            \"endpoint\": 'docs',\n",
    "            \"route\": '/docs.json',\n",
    "        }\n",
    "    ],\n",
    "    \"static_url_path\": \"/flasgger_static\",\n",
    "    \"swagger_ui\": True,\n",
    "    \"specs_route\": \"/docs/\"\n",
    "}\n",
    "swagger = Swagger(app, template=swagger_template,             \n",
    "                  config=swagger_config)\n",
    "\n",
    "# Define Feature Extraction parameter and Tokenizer class\n",
    "max_features = 100000\n",
    "tokenizer = Tokenizer(num_words=max_features, split=' ', lower=True)\n",
    "\n",
    "# Define label of sentiments\n",
    "sentiment = ['negative', 'neutral', 'positive']\n",
    "\n",
    "# Cleansing process\n",
    "def cleansing(sent):\n",
    "    # Mengubah kata menjadi huruf kecil semua dengan menggunakan fungsi lower()\n",
    "    string = sent.lower()\n",
    "    # Menghapus emoticon dan tanda baca menggunakan \"RegEx\" dengan script di bawah\n",
    "    string = re.sub(r'[^a-zA-Z0-9]', ' ', string)\n",
    "    return string\n",
    "\n",
    "# LSTM\n",
    "## Load result of Feature Extraction process from LSTM\n",
    "file = open(\"resources_of_lstm/x_pad_sequences.pickle\",'rb')\n",
    "feature_file_from_lstm = pickle.load(file)\n",
    "file.close()\n",
    "\n",
    "## Load model from LSTM\n",
    "model_file_from_lstm = load_model('resources_of_lstm/model.h5')\n",
    "\n",
    "# NN\n",
    "## Load result of Feature Extraction process from NN\n",
    "file = open(\"resources_of_nn/feature.p\",'rb')\n",
    "tfidf_vec = pickle.load(file)\n",
    "file.close()\n",
    "\n",
    "## Load model from NN\n",
    "model_file_from_nn = pickle.load(open('resources_of_nn/model.p', 'rb'))\n",
    "\n",
    "# Define endpoint for Sentiment Analysis using LSTM\n",
    "@swag_from(\"docs/lstm.yml\", methods=['POST'])\n",
    "@app.route('/lstm', methods=['POST'])\n",
    "def lstm():\n",
    "    # Get text\n",
    "    original_text = request.form.get('text')\n",
    "    # Cleansing\n",
    "    text = [cleansing(original_text)]\n",
    "    # Feature extraction\n",
    "    feature = tokenizer.texts_to_sequences(text)\n",
    "    feature = pad_sequences(feature, maxlen=feature_file_from_lstm.shape[1])\n",
    "    # Inference\n",
    "    prediction = model_file_from_lstm.predict(feature)\n",
    "    get_sentiment = sentiment[np.argmax(prediction[0])]\n",
    "\n",
    "    # Define API response\n",
    "    json_response = {\n",
    "        'status_code': 200,\n",
    "        'description': \"Result of Sentiment Analysis using LSTM\",\n",
    "        'data': {\n",
    "            'text': original_text,\n",
    "            'sentiment': get_sentiment\n",
    "        },\n",
    "    }\n",
    "    response_data = jsonify(json_response)\n",
    "    return response_data\n",
    "\n",
    "# Define endpoint for Sentiment Analysis using LSTM from file\n",
    "@swag_from(\"docs/lstm_file.yml\", methods=['POST'])\n",
    "@app.route('/lstm-file', methods=['POST'])\n",
    "def lstm_file():\n",
    "\n",
    "    # Upladed file\n",
    "    file = request.files.getlist('file')[0]\n",
    "\n",
    "    # Import file csv ke Pandas\n",
    "    df = pd.read_csv(file, encoding='latin-1')\n",
    "\n",
    "    # Get text from file in \"List\" format\n",
    "    texts = df.Tweet.to_list()\n",
    "\n",
    "    # Loop list or original text and predict to model\n",
    "    text_with_sentiment = []\n",
    "    for original_text in texts:\n",
    "\n",
    "        # Cleansing\n",
    "        text = [cleansing(original_text)]\n",
    "        # Feature extraction\n",
    "        feature = tokenizer.texts_to_sequences(text)\n",
    "        feature = pad_sequences(feature, maxlen=feature_file_from_lstm.shape[1])\n",
    "        # Inference\n",
    "        prediction = model_file_from_lstm.predict(feature)\n",
    "        get_sentiment = sentiment[np.argmax(prediction[0])]\n",
    "\n",
    "        # Predict \"text_clean\" to the Model. And insert to list \"text_with_sentiment\".\n",
    "        text_with_sentiment.append({\n",
    "            'text': original_text,\n",
    "            'sentiment': get_sentiment\n",
    "        })\n",
    "    \n",
    "    # Define API response\n",
    "    json_response = {\n",
    "        'status_code': 200,\n",
    "        'description': \"Teks yang sudah diproses\",\n",
    "        'data': text_with_sentiment,\n",
    "    }\n",
    "    response_data = jsonify(json_response)\n",
    "    return response_data\n",
    "\n",
    "# Define endpoint for Sentiment Analysis using NN\n",
    "@swag_from(\"docs/nn.yml\", methods=['POST'])\n",
    "@app.route('/nn', methods=['POST'])\n",
    "def cnn():\n",
    "    # Get text\n",
    "    original_text = request.form.get('text')\n",
    "    # Cleansing\n",
    "    text = cleansing(original_text)\n",
    "    # Feature extraction\n",
    "    text_feature = tfidf_vec.transform([text])\n",
    "    # Inference\n",
    "    get_sentiment = model_file_from_nn.predict(text_feature)[0]\n",
    "\n",
    "    # Define API response\n",
    "    json_response = {\n",
    "        'status_code': 200,\n",
    "        'description': \"Result of Sentiment Analysis using CNN\",\n",
    "        'data': {\n",
    "            'text': original_text,\n",
    "            'sentiment': get_sentiment\n",
    "        },\n",
    "    }\n",
    "    response_data = jsonify(json_response)\n",
    "    return response_data\n",
    "\n",
    "\n",
    "# Define endpoint for Sentiment Analysis using NN from file\n",
    "@swag_from(\"docs/nn_file.yml\", methods=['POST'])\n",
    "@app.route('/nn-file', methods=['POST'])\n",
    "def nn_file():\n",
    "\n",
    "    # Upladed file\n",
    "    file = request.files.getlist('file')[0]\n",
    "\n",
    "    # Import file csv ke Pandas\n",
    "    df = pd.read_csv(file, encoding='latin-1')\n",
    "\n",
    "    # Get text from file in \"List\" format\n",
    "    texts = df.Tweet.to_list()\n",
    "\n",
    "    # Loop list or original text and predict to model\n",
    "    text_with_sentiment = []\n",
    "    for original_text in texts:\n",
    "\n",
    "        # Cleansing\n",
    "        text = cleansing(original_text)\n",
    "        # Feature extraction\n",
    "        text_feature = tfidf_vec.transform([text])\n",
    "        # Inference\n",
    "        get_sentiment = model_file_from_nn.predict(text_feature)[0]\n",
    "\n",
    "        # Predict \"text_clean\" to the Model. And insert to list \"text_with_sentiment\".\n",
    "        text_with_sentiment.append({\n",
    "            'text': original_text,\n",
    "            'sentiment': get_sentiment\n",
    "        })\n",
    "    \n",
    "    # Define API response\n",
    "    json_response = {\n",
    "        'status_code': 200,\n",
    "        'description': \"Teks yang sudah diproses\",\n",
    "        'data': text_with_sentiment,\n",
    "    }\n",
    "    response_data = jsonify(json_response)\n",
    "    return response_data\n",
    "\n",
    "if __name__ == '__main__':\n",
    "   app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "40c2e50b-8fa2-42d8-b1b2-9303bd65e9f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Package                      Version\n",
      "---------------------------- ------------\n",
      "absl-py                      2.0.0\n",
      "asttokens                    2.4.0\n",
      "astunparse                   1.6.3\n",
      "attrs                        23.1.0\n",
      "backcall                     0.2.0\n",
      "blinker                      1.6.2\n",
      "cachetools                   5.3.2\n",
      "certifi                      2023.11.17\n",
      "charset-normalizer           3.3.2\n",
      "click                        8.1.7\n",
      "colorama                     0.4.6\n",
      "comm                         0.1.4\n",
      "contourpy                    1.1.1\n",
      "cycler                       0.12.0\n",
      "debugpy                      1.8.0\n",
      "decorator                    5.1.1\n",
      "executing                    2.0.0\n",
      "flasgger                     0.9.7.1\n",
      "Flask                        2.3.3\n",
      "flatbuffers                  23.5.26\n",
      "fonttools                    4.43.0\n",
      "gast                         0.4.0\n",
      "google-auth                  2.24.0\n",
      "google-auth-oauthlib         1.0.0\n",
      "google-pasta                 0.2.0\n",
      "grpcio                       1.59.3\n",
      "h5py                         3.10.0\n",
      "idna                         3.6\n",
      "importlib-metadata           6.8.0\n",
      "importlib-resources          6.1.0\n",
      "ipykernel                    6.25.2\n",
      "ipython                      8.12.3\n",
      "itsdangerous                 2.1.2\n",
      "jedi                         0.19.0\n",
      "Jinja2                       3.1.2\n",
      "joblib                       1.3.2\n",
      "jsonschema                   4.19.1\n",
      "jsonschema-specifications    2023.7.1\n",
      "jupyter_client               8.3.1\n",
      "jupyter_core                 5.3.2\n",
      "keras                        2.13.1\n",
      "kiwisolver                   1.4.5\n",
      "libclang                     16.0.6\n",
      "Markdown                     3.5.1\n",
      "MarkupSafe                   2.1.3\n",
      "matplotlib                   3.7.3\n",
      "matplotlib-inline            0.1.6\n",
      "mistune                      3.0.2\n",
      "nest-asyncio                 1.5.8\n",
      "numpy                        1.24.3\n",
      "oauthlib                     3.2.2\n",
      "opt-einsum                   3.3.0\n",
      "packaging                    23.1\n",
      "pandas                       2.0.3\n",
      "parso                        0.8.3\n",
      "pickleshare                  0.7.5\n",
      "Pillow                       10.0.1\n",
      "pip                          23.3.1\n",
      "pkgutil_resolve_name         1.3.10\n",
      "platformdirs                 3.10.0\n",
      "prompt-toolkit               3.0.39\n",
      "protobuf                     4.25.1\n",
      "psutil                       5.9.5\n",
      "pure-eval                    0.2.2\n",
      "pyasn1                       0.5.1\n",
      "pyasn1-modules               0.3.0\n",
      "Pygments                     2.16.1\n",
      "pyparsing                    3.1.1\n",
      "python-dateutil              2.8.2\n",
      "pytz                         2023.3.post1\n",
      "pywin32                      306\n",
      "PyYAML                       6.0.1\n",
      "pyzmq                        25.1.1\n",
      "referencing                  0.30.2\n",
      "regex                        2023.8.8\n",
      "requests                     2.31.0\n",
      "requests-oauthlib            1.3.1\n",
      "rpds-py                      0.10.3\n",
      "rsa                          4.9\n",
      "scikit-learn                 1.3.0\n",
      "scipy                        1.10.1\n",
      "seaborn                      0.13.0\n",
      "setuptools                   47.1.0\n",
      "six                          1.16.0\n",
      "stack-data                   0.6.2\n",
      "tensorboard                  2.13.0\n",
      "tensorboard-data-server      0.7.2\n",
      "tensorflow                   2.13.0\n",
      "tensorflow-estimator         2.13.0\n",
      "tensorflow-intel             2.13.0\n",
      "tensorflow-io-gcs-filesystem 0.31.0\n",
      "termcolor                    2.4.0\n",
      "threadpoolctl                3.2.0\n",
      "tornado                      6.3.3\n",
      "traitlets                    5.10.1\n",
      "typing_extensions            4.5.0\n",
      "tzdata                       2023.3\n",
      "urllib3                      2.1.0\n",
      "wcwidth                      0.2.8\n",
      "Werkzeug                     3.0.0\n",
      "wheel                        0.42.0\n",
      "wrapt                        1.16.0\n",
      "zipp                         3.17.0\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61221026-a795-48a6-b20a-4501d88f256e",
   "metadata": {},
   "outputs": [],
   "source": [
    "pip install "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b2683c8-2ff1-4e94-90b7-55d4fe820359",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "my_env",
   "language": "python",
   "name": "my_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
